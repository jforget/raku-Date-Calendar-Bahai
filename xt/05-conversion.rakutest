#
# Checking the conversions when using the arithmetic calendar
#
use v6.c;
use Test;
use Date::Calendar::Bahai;

my @test-data = load-data();

plan 3 Ã— @test-data.elems;

for @test-data -> $datum {
  my ($major, $cycle, $cycle-y, $y-bh, $m-bh, $d-bh, $y-gr, $m-gr, $d-gr) = $datum;

  my Date::Calendar::Bahai
          $date-bh;
  my Date $date-gr;

  $date-gr .= new($y-gr, $m-gr, $d-gr);
  $date-bh .= new-from-date($date-gr);

  my Str $expected = sprintf("%04d-%02d-%02d", $y-bh, $m-bh, $d-bh);
  is($date-bh.gist, $expected);
}

for @test-data -> $datum {
  my ($major, $cycle, $cycle-y, $y-bh, $m-bh, $d-bh, $y-gr, $m-gr, $d-gr) = $datum;

  my Date::Calendar::Bahai
          $date-bh;
  my Date $date-gr;

  $date-bh .= new(year => +$y-bh, month => +$m-bh, day => +$d-bh);
  $date-gr  = $date-bh.to-date;

  my Str $expected = sprintf("%04d-%02d-%02d", $y-gr, $m-gr, $d-gr);
  is($date-gr.gist, $expected);
}

for @test-data -> $datum {
  my ($major, $cycle, $cycle-y, $y-bh, $m-bh, $d-bh, $y-gr, $m-gr, $d-gr) = $datum;

  my Date::Calendar::Bahai
          $date-bh;
  my Date $date-gr;

  $date-bh .= new(major-cycle => +$major, cycle => +$cycle, cycle-year => +$cycle-y
                 , month => +$m-bh, day => +$d-bh);
  $date-gr  = $date-bh.to-date;

  my Str $expected = sprintf("%04d-%02d-%02d", $y-gr, $m-gr, $d-gr);
  is($date-gr.gist, $expected);
}

done-testing;

# Test data were computed by the Perl module Date::Converter
# and cross-checked with https://www.funaba.org/cc
sub load-data {
  return (
           <  1  1  1    1  1  1 1844  3 21>
         , <  1  1  1    1 19  1 1845  2 26>
         , <  1  1  1    1 20 19 1845  3 20>
         , <  1  1  2    2  1  1 1845  3 21>
         , <  1  4  3   60  2 11 1903  4 19>
         , <  1  5 10   86  9  6 1929  8 25>
         , <  1  6  3   98 11  3 1941  9 29>
         , <  1  6  5  100  2 11 1943  4 19>
         , <  1  6  5  100 11 11 1943 10  7>
         , <  1  8 15  148 20 16 1992  3 17>
         , <  1  8 19  152 18 19 1996  2 25>
         , <  1 10  4  175 19  3 2019  2 28>
         , <  1 10  4  175 19  4 2019  3  1>
         , <  1 10  4  175 20  1 2019  3  2>
         , <  1 10  5  176 19  4 2020  2 29>
         , <  1 10  5  176 19  5 2020  3  1>
         , <  1 10  5  176 20  1 2020  3  2>
         , <  1 10  5  176 20 19 2020  3 20>
         , <  1 10  7  178  4  4 2021  5 20>
         , <  1 11  5  195 13  7 2038 11 10>
         , <  1 14  4  251  7  6 2094  7 18>

  );
}
