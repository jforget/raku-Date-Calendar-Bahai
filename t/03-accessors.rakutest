#
# Checking the attributes of dates built with year, month, day values
#
use Test;
use Date::Calendar::Bahai;
use Date::Calendar::Bahai::Astronomical;

my @tests = (('zzz',       3, 'zzz')
           , ('%Y-%m-%d', 10, '0178-04-02')
           , ('%j',        3, '059')
           , ('%Oj',       3, '059')
           , ('%Ej',       3, '059')
           , ('%Ey',       3, '%Ey')
           , ('%a',        3, 'Fid')
           , ('%A',        5, 'Fiḍál')
           , ('%u',        1, '4')
           , ('%B',        7, "‘Aẓamat")
           , ('%b',        3, 'Aza')
           , ('%Y',        4, '0178')
       #   , ('%G',        4, '0178')
       #   , ('%V',        2, '08')
             );

#plan 8 + 2 × @tests.elems + 5 + 5;
plan 11 + 2 × @tests.elems + 29 + 2 + 2;

# 1-10-04-07-02 = 0178-04-02 = 2021-05-18
my Date::Calendar::Bahai $d .= new(year => 178, month => 4, day => 2);

is($d.month,         4);
is($d.day,           2);
is($d.year,        178);
is($d.locale,     'ar');
is($d.cycle-year,    7);
is($d.cycle,        10);
is($d.major-cycle,   1);
is($d.daycount,  59352);
is($d.day-of-week,   4);
is($d.day-of-year,  59);
#is($d.week-year,   178);
#is($d.week-number,   8);
is($d.gist,  '0178-04-02');

for @tests -> $test {
  my ($format, $length, $expected) = $test;
  my Str $result = $d.strftime($format);

  # Remembering RT ticket 100311 for the Perl 5 module DateTime::Calendar::FrenchRevolutionary
  # see https://github.com/jforget/DateTime-Calendar-FrenchRevolutionary/issues/6
  # Even if the relation between UTF-8 and Raku is much simpler than between UTF-8 and Perl5
  # better safe than sorry
  is($result.chars, $length);
  is($result,       $expected);
}

# 1-10-07-04-03 = 0178-04-03 = 2021-05-19
$d .= new(major-cycle => 1, cycle => 10, cycle-year => 7, month => 4, day => 3, locale => 'en');
is($d.month,         4);
is($d.day,           3);
is($d.year,        178);
is($d.locale,     'en');
is($d.cycle-year,    7);
is($d.cycle,        10);
is($d.major-cycle,   1);
is($d.month-name,       "Grandeur");
is($d.month-abbr,       "Gra");
is($d.cycle-year-name,  "Eternity");
is($d.day-name,         "Justice");
is($d.day-abbr,         "Jus");
is($d.daycount,  59353);
is($d.day-of-week,   5);
is($d.day-of-year,  60);

$d.locale = 'fr';

is($d.daycount,  59353);
is($d.day-of-week,   5);
is($d.day-of-year,  60);
is($d.locale,     'fr');
is($d.cycle-year-name,  "Éternité");
is($d.day-name,         "Justice");
is($d.day-abbr,         "Jus");
is($d.month-name,       "Grandeur");
is($d.month-abbr,       "Gra");

$d.locale = 'ar';

is($d.cycle-year-name,  "Abad");
is($d.month-name,       "‘Aẓamat");
is($d.month-abbr,       "Aza");
is($d.day-name,         "ʻIdál");
is($d.day-abbr,         "Ida");

# Year starting on 21 March
my Date::Calendar::Bahai::Astronomical $d1 .= new(year => 176, month => 12, day => 2);
is($d1.month,        12);
is($d1.year,        176);

# Year starting on 20 March
$d1 .= new(year => 181, month => 14, day => 2);
is($d1.month,        14);
is($d1.year,        181);

done-testing;
